////Comentarios////
//Este comentario no irá en el CSS
/*Este comentario irá en el CSS, salvo que se use el modo comprimido*/
/*!Este comentario siempre irá en el CSS*/


////////////////////
////nested rules////
////////////////////
/* Nested rules allows you to organise your code in a more structured, logical and readable way by reflecting the hierarchy of HTML elements directly in the styles. This means you can write rules nested inside other rules instead of repeating selectors at every level.
Advantages:
  -Legibility: Makes it easier to understand the relationship between selectors.
  -Order: Keeps code cleaner by avoiding repetition.
  -Efficiency: Reduces writing time and makes code more manageable in large projects.
  
Be careful of not nesting too much
*/

//Example 1: basic nested selectors
nav {
  ul {
    margin: 0;
    padding: 0;
    li {
      list-style: none;
    }
  }
}

/*resulting CSS:
nav ul {
  margin: 0;
  padding: 0;
}
nav ul li {
  list-style: none;
}
nav ul li a {
  text-decoration: none;
}
*/


//Example 2: parent selector (&)
button {
  &.primary {
    background-color: blue;
  }
  &:hover {
    background-color: darkblue;
  }
}

/*resulting CSS:
button.primary {
  background-color: blue;
}

button.secondary {
  background-color: darkblue;
}*/

//Example 3: parent selector and pseudoclasses
a {
  color: blue;
  &:hover {
    color: darkblue;
  }
  &::before {
    content: '→';
    margin-right: 5px;
  }
}

/*resulting CSS:
a {
  color: blue;
}
a:hover {
  color: darkblue;
}
a::before {
  content: '→';
  margin-right: 5px;
}*/


//Example 4:  nesting properties with common prefixes
.box {
  margin: {
    top: 10px;
    bottom: 20px;
  }
  padding: {
    left: 15px;
    right: 15px;
  }
}

/*resulting CSS:
.box {
  margin-top: 10px;
  margin-bottom: 20px;
  padding-left: 15px;
  padding-right: 15px;
}*/


//Example 5: 
.button, .link {
  &--primary {
    background-color: blue;
    color: white;
  }
}

/*resulting CSS:
.button--primary {
  background-color: blue;
  color: white;
}
.link--primary {
  background-color: blue;
  color: white;
}
*/



///////////////////////
////Data structures////
///////////////////////
/*
  -Variables. They can be globals, at the beginning of the file, or locals, defined inside any class or label. Locals have preference over globals
  -Lists. Set of values accessed by index. First element = 1
  -Maps. Similar to lists, they have a key to access values
*/

////Example 1: Definición de variables globales
$color-primario: #3498db;
$tamaño-fuente: 16px;

// Uso de variables globales
body {
  font-size: $tamaño-fuente;
  background-color: $color-primario;
}

//Ejemplo 2: Definición de variables locales
// Definición de variables locales dentro de un bloque
$color-fondo: #ecf0f1;

.navbar {
  $color-fondo: #2c3e50; // Variable local, definida dentro de .navbar
  background-color: $color-fondo; // Usando la variable local
}

//Example 3: lists
$tamanyos:(40px, 80px, 160px);
.banner {
  h1{
    font-size: nth($tamanyos,2);
  }
}
  
//Example 4: maps
$error:(
  "leve": 1rem,
  "medio": 2rem,
  "grave": 2.5rem
);
  
.error-leve{
  font-size: map.get($error, "leve");
}


/////////////////////
////Interpolation////
/////////////////////
//Permite insertar dinámicamente valores dentro de una cadena de texto o un selector, utilizando la sintaxis #{}
//Flexibilidad: Permite crear reglas más dinámicas basadas en valores de variables, sin necesidad de escribir cada regla manualmente.
// Reusabilidad: Puedes generar clases y selectores dinámicamente con el contenido de las variables, haciendo que tu código sea más limpio y fácil de mantener.
// Combinación de valores: Permite combinar strings y variables de forma sencilla, lo que facilita la generación de valores complejos.

//Ejemplo 1: Interplación básica en un comentario
$autor: "Chiquito de la calzada";
/*Web desarrollada por #{$autor}*/

//Ejemplo 2: Interpolación en nombres de clases o IDs
$color: 'red';

.button-#{$color} {
  background-color: $color;
}

//Ejemplo 3: Interpolación en propiedades CSS
$prefijo: 'font';
$tamaño: 'size';

#{$prefijo}-#{$tamaño} {
  font-size: 16px;
}

//Ejemplo 4: Interpolación para combinaciones de valores
$base: 'color';
$valor: 'blue';

.selector {
  background-#{$base}: $valor;
}

body{
  $color-fondo:rgb(116, 222, 246);
  background-color: variables.$color-fondo;
  color: variables.$color-texto;
}

//Ejemplo 5: Interpolación dentro de URLs:
$image-path: 'images/logo.png';

.selector{
  background-image: url('#{$image-path}');
}


/////////////////
////operators////
/////////////////
//Example 1: arithmetic operators: +, -, *, % (/ is deprecated, use math.div instead)
$base: 16px;

.container {
  font-size: $base * 1.5; // Resultado: 24px
  padding: $base - 2;     // Resultado: 14px
}

//Example 2: comparison operators: ==, !=, <, >, <=, >= using global function "if"
$size: 10px;

.container {
  font-size: if($size > 5px, $size, 5px); // Resultado: 10px si $size > 5px, 5px si no
}

//Example 3: Logical operators: and, or, not using "if" global function
$primary-color: #3498db;
$use-color: true;

.container {
  color: if($use-color and $primary-color, $primary-color, black); // Resultado: #3498db
}

//Example 4: concat operator +
$base-color: 'color';
$variant: 'primary';

.result {
  content: $base-color + '-' + $variant; // Resultado: "color-primary"
}

//////////////////////
////user functions////
//////////////////////
// Se usan cuando hay que hacer algún cálculo, NO PARA REUTILIZAR CÓDIGO. Para eso están los mixins

//Example 1: converting units
@function px-to-rem($px, $base-font-size: 16px) {
  @return $px / $base-font-size * 1rem;
}

.container {
  padding: px-to-rem(32px); // Resultado: 2rem
}

.parrafo{
  padding: px-to-rem(16px);
}

//Example 2: unit scaling
@function escala-tipografica($base, $factor) {
  @return $base * $factor;
}

h1 {
  font-size: escala-tipografica(16px, 1.5); // Resultado: 24px
}

h2 {
  font-size: escala-tipografica(16px, 1.25); // Resultado: 20px
}

//Example 3: chain manipulation
@function generar-clase-color($nombre) {
  @return '.color-' + $nombre;
}

#{generar-clase-color('primario')} {
  color: #3498db;
}

#{generar-clase-color('secundario')} {
  color: #34db8a;
}

#{generar-clase-color('resalto')} {
  color: #db3434;
}

//Example 4: adding dynamic prefixes
@function add-prefix($prefix, $value) {
  @return "#{$prefix}-#{$value}";
}

#{add-prefix('btn', 'primary')}{
  color:blue;
}



/////////////////
////debugging////
/////////////////
// @debug allows printing in the terminal the result of a calculation or the value of a method or variable.
// it does not work with VS Code extension "live sass compiler". Use node package "sass" instead and configure a script: sass --watch source:destination --source-map

//Example 1: debugging variables
$color-principal: #3498db;
$padding: 20px;

@debug $color-principal;
@debug $padding;

//Example 2: debugging expressions with operators
$base-size: 16px;
$multiplier: 1.5;
$calculated-size: $base-size * $multiplier;
@debug "Calculated size is #{$calculated-size}"; // Saldrá en la terminal con Dart Sass


//Example 3: debugging user-defined functions
@function add-prefix($prefix, $value) {
  @return "#{$prefix}#{$value}";
}
@debug(add-prefix("button", ":hover"));


//Example 3: debugging sass built-in functions
@use 'sass:list';
$colors: red, blue, green;
@debug (list.append($colors, yellow));


////////////////////////////
////user-defined modules////
////////////////////////////
/*User-defined modules allow code to be organised and reused by splitting it into smaller, more specific files. This improves the readability, modularity and maintainability of projects.

How to name module files? _miModulo.scss.  This "_" prevents sass compiler to compile this files which are intented to be imported

How to import modules? by using @use directive at the beginning of the file: @use 'miModulo'; (no _ and no .scss)

What is a directive?
  -It's a special statement that affects the compiler's behavior or the file structure.
  -They don't return any value but perform actions like import, mix, or condition.
  -They start with an @.

How to use imported content in the receiving module? 
  -@use ‘mySuperComplicatedFunctions' makes the contents of the imported file to be under a namespace named like the file. Therefore, any resource must be preceded by the name of the module like, for instance, mySuperComplicatedFunctions.variable or mySuperComplicatedFunctions.add(2,3)
  -@use ‘mySuperComplicatedFunctions' as * -> no namespace is required to access any resource. This is risky because it can make it harder to track the origin of a resource and may cause conflicts if resources with the same name exist in different modules.
  -@use ‘mySuperComplicatedFunctions' as 'myFunc'; -> the namespace is changed to myFunc

Forwarding modules
  -In large projects, it is common to create an intermediate file that imports all modules before exporting them to the main file.
  -This way, the main file don't have to import every single module individually.

How to forward modules? by using @use and @forward directive (@use 'moduloInicial'; @forward 'miModulo';)

Good practices using modules
  -create an index file and use @forward on it
  -do not use large namespaces
  -organize modules:
    -according to its purpose: variables, mixins, functions, etc.
    -according to components: header, sidebar, main, grid, etc.
    -according to its components and to its layout (my favourite): (suggested organization)
        proyecto/
        ├── fuente/
        │   ├── sass/
        │   │   ├── base/ -> 
        |   |   |   ├── _normalizacion.scss
        |   |   |   ├── _reinicio.scss
        |   |   |   └── _tipografia.scss
        │   │   ├── componentes/ -> organized by components, every style except layout!
        │   │   │   ├── _botones.scss
        │   │   │   ├── _cabecera.scss
        │   │   │   ├── _pie.scss
        │   │   │   └── _principal.scss
        │   │   ├── disposicion/ -> organized by components, only layout-related sytles!
        │   │   │   ├── _disp_comun.scss
        │   │   │   ├── _disp_cabecera.scss
        │   │   │   ├── _disp_pie.scss
        │   │   │   └── _disp_principal.scss
        │   │   ├── global/ -> reusable elements. they does not contain anything related to layout
        │   │   │   ├── _funciones.scss
        │   │   │   ├── _medios.scss
        │   │   │   ├── _mixins.scss
        │   │   │   └── _variables.scss
        │   │   ├── principal.scss -> Everything will be imported here
        │   ├── html/
        │   ├── js/
        │   ├── package.json
        |   └── package-lock.json

What is a reset?
  a reset is a set of rules that are applied to remove the default styles that browsers automatically apply to HTML elements. Each browser has its own default stylesheet, which can cause inconsistencies in the appearance of a web page when viewed in different browsers.

  Eric meyers's reset might be one of the most famous reset

What is normalize?
  Normalize keeps some reasonable default styles, adjusting them to be consistent across browsers. It's ideal for getting started with a modern design without worrying too much about inconsistencies.
*/

//Example 1: importing modules
// This is the file "_misVariablesParaTodosLosCasos.scss "
$primary-color: #3498db;

//using _misVariablesParaTodosLosCasos.scss in styles.css
// This is styles.scss file
@use 'misVariablesParaTodosLosCasos';

.button {
  color: misVariablesParaTodosLosCasos.$primary-color;
}

//Example 2: avoid using namespaces
//not recommended as this can lead to a loss of awareness of where the resource is located and can lead to conflict with resources that have the same name but belong to different modules.
//this is styles.scss files
@use 'misVariablesParaTodosLosCasos' as *;
.button {
  color: $primary-color;
}

//Example 3: avoid using large namespaces
//this is styles.scss files
@use 'misVariablesParaTodosLosCasos' as vars;
.button {
  color: vars.$primary-color;
}

//Example 4: forwarding imported modules
// this is the file _colors.scss
$primary-color: #3498db;
$secondary-color: #2ecc71;

// this is the file _styles.scss
@use 'colors';
@forward 'colors';

// this is the file main.scss -> no need to import _colors.scss as it is importing _styles.scss wich forwards the former
@use 'styles';

.button {
  background-color: styles.$primary-color;
}


//Example 5: forwarding
// this is the file _variables.scss
$font-size: 16px;
$primary-color: #3498db;

// this is the file _mixins.scss
@mixin center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// this is the file _functions.scss
@function multiply($value, $factor) {
  @return $value * $factor;
}

// this is the file _main.scss
@forward 'variables';
@forward 'mixins';
@forward 'functions';

// this is the file styles.scss
@use 'main';

.container {
  font-size: main.$font-size;
  color: main.$primary-color;
  @include main.center;
  width: main.multiply(10px, 2);
}




//////////////////////////
////built-in functions////
//////////////////////////
/*
SASS has built-in functions. Some are global and some others are organized into modules that need to be imported before using them

These modules are organized by similarity
    -sass:color -> generates new colors based on existing ones, making it easy to build color themes.
    -sass:list -> access and modify values in lists. They can be used to create dynamic collections like colors, sizes or menu elements
    -sass:map -> work with maps (a list of key-value pairs). They can be used to store configuration information, colors, sizes or any data that needs to be associated with a key in a map
    -sass:math -> operate on numbers.
    -sass:meta -> obtain details about Sass files and facilitate manipulation of their structure.
    -sass:selector -> allows you...
      -to create dynamic selectors
      -to analyze and modify selectors
    -sass:string -> makes it easy to combine, search, or split apart strings. They are helpful for:
      -Dynamically modifying and formatting text in your style files, such as creating CSS values from variables and transforming strings.
      -Dynamic generation of classes or ids
      -Working with paths or URLs

The way of invoking sass built-in modules is @use "sass:map";
*/

//Example 1: global built-in color functions
//They are global functions, so no need to import anything

//rgb($red, $green, $blue) Crea un color en formato RGB a partir de valores numéricos de los componentes rojo, verde y azul. 
$color: rgb(52, 152, 219);

//rgba($red, $green, $blue, $alpha) Similar a rgb, pero permite especificar la opacidad del color a través de un valor de alfa (transparencia).
$color: rgba(52, 152, 219, 0.5);

//hsla($hue, $saturation, $lightness, $alpha) Permite crear un color en el modelo de color HSL (matiz, saturación, luminosidad) con un valor alfa para la opacidad.
$color: hsla(200, 100%, 50%, 0.3);


//Example 2: sass color built-in module
@use 'sass:color';
$color: #3498db;
//adjust-color($color, $adjustment...) Permite ajustar propiedades del color, como el brillo, la saturación, la opacidad, etc. 
.button2 {
  background-color: color.adjust($color-primary, $blue: -30%, $alpha: 0.5);
}

//change-color($color, $changes...) Cambia una propiedad específica de un color, como el tono, la saturación o la opacidad, sin afectar las demás propiedades. Similar a adjust-color, pero más explícito.
$changed-color: color.change($color, $hue: 180deg, $alpha: 0.8);

//color.scale($color, $adjustments...) Escala un color, ajustando su brillo, saturación, opacidad, etc. Es útil para crear variaciones de un color base.
.button {
  background-color: color.scale($color, $lightness: -10%, $saturation: 15%);
}

//mix($color1, $color2, $weight) color.scale($color, $adjustments...) Mezcla dos colores en un porcentaje especificado. Es útil para crear transiciones suaves o combinaciones de colores.
$color2: #e74c3c;
$mixed-color: color.mix($color1, $color2, 50%);

//complement($color) Calcula el color complementario de un color dado.
$complementary-color: color.complement($color);

//grayscale($color) Convierte un color a su versión en escala de grises. Esto elimina la saturación del color, pero mantiene el brillo.
$grayscale-color: color.grayscale($color);

//invert($color, $amount) Invierte los colores en un porcentaje dado. Esto es útil para crear efectos visuales como inversiones de color en interacciones o animaciones.
$inverted-color: color.invert($color, 50%);


//Example 3: sass:list functions
//Sass lists are immutable, it doesn’t modify the original list.
@use 'sass:list';
$colors: red, blue, green;
$colors2: lightcoral, lightblue, lightgreen;

// list.length($list) Devuelve la longitud de una lista.
$number-of-colors: list.length($colors); // Resultado: 3

// list.index($list, $value) Devuelve la posición del primer elemento en la lista que coincide con $value.
$index: list.index($colors, blue); // Resultado: 2

// list.nth($list, $n) Devuelve el elemento en la posición $n de la lista (empezando desde 1).
$second-color: list.nth($colors, 2); // Resultado: blue

//list.set-nth($list, $n, $value) devuelve una copia de la lista $list con el valor $value en la posición $n
$second-color: list.set-nth($second-color, 3, green);

// list.append($list, $value) Añade un valor al final de la lista.
$new-colors: list.append($colors, yellow); // Resultado: red, blue, green, yellow

// list.join($list, $separator) Une los elementos de la lista en una cadena, separándolos con el valor $separator.
$colors-string: list.join($colors, ', '); // Resultado: red, blue, green

// list.zip($lista1, $lista2) combina las listas de forma que va intercalando sus valores
$nueva-lista: list.zip($colors,$colors2);


//Example 4: some list functions
@use "sass:list";
$colors: red, blue, green, yellow;
$menu-items: home, about, services, contact;

.example {
  color: list.nth($colors, 2);
}

.contenedor {
  width: list.length($menu-items) * 100px;
  display: grid;
  grid-template-columns: repeat(list.length($menu-items), 1fr);
}


//Example 5: sass:map functions
//Maps in Sass are immutable, which means that the contents of a map value never changes. Sass’s map functions all return new maps rather than modifying the originals
$colors: (
  primary: #3498db,
  secondary: #2ecc71,
  accent: #e74c3c
);

//map.get($map, $key) Devuelve el valor asociado a la clave $key en el mapa $map.
$primary-color: map.get($colors, primary); // Resultado: #3498db

//map.set($map, $key, $value) Establece un nuevo valor en el mapa para la clave $key.
$updated-colors: map.set($colors, accent, #e74c3c);
// Resultado: (primary: #3498db, secondary: #2ecc71, accent: #e74c3c)

//map.remove($map, $key) Elimina un valor del mapa en la clave especificada $key.
$updated-colors: map.remove($colors, accent);
// Resultado: (primary: #3498db, secondary: #2ecc71)

//map.has-key($map, $key) Devuelve true si el mapa contiene la clave $key, o false si no la tiene.
$has-accent: map.has-key($colors, accent); // Resultado: false

//map.keys($map) Devuelve una lista de todas las claves en el mapa.
$keys: map.keys($colors); // Resultado: primary, secondary, accent

//map.values($map) Devuelve una lista de todos los valores del mapa.
$values: map.values($colors); // Resultado: #3498db, #2ecc71, #e74c3c

//map.merge($map1, $map2) Une dos mapas, agregando las claves y valores de $map2 a $map1.
$map1: (
  primary: #3498db,
  secondary: #2ecc71
);

$map2: (
  accent: #e74c3c,
  background: #f1f1f1
);

$merged-map: map.merge($map1, $map2); 
// Resultado: (primary: #3498db, secondary: #2ecc71, accent: #e74c3c, background: #f1f1f1)

//map.deep-remove($map, $key) Elimina recursivamente la clave especificada en todos los niveles del mapa.
$nested-map: (
  colors: (
    primary: #3498db,
    secondary: #2ecc71
  ),
  typography: (
    header: 16px,
    body: 14px
  )
);

$updated-map: map.deep-remove($nested-map, secondary);
// Resultado: (colors: (primary: #3498db), typography: (header: 16px, body: 14px))

//map.deep-merge($map1, $map2) Fusiona dos mapas, pero si una clave tiene un valor de mapa en ambos mapas, los valores se fusionan recursivamente.
$map1: (
  colors: (
    primary: #3498db,
    secondary: #2ecc71
  )
);

$map2: (
  colors: (
    accent: #e74c3c
  )
);

$merged-map: map.deep-merge($map1, $map2);
// Resultado: (colors: (primary: #3498db, secondary: #2ecc71, accent: #e74c3c))


//Example 6:sass:math functions
//math.div($a, $b) Realiza una división, pero de forma segura para evitar la confusión de unidades en las divisiones.
$width: 500px;
$columns: 5;
$column-width: math.div($width, $columns);

//math.pow($base, $exponent) Calcula el valor de $base elevado a la potencia de $exponent.
$base: 2;
$exponent: 3;
$result: math.pow($base, $exponent);

//math.sqrt($number) Calcula la raíz cuadrada de un número.
$number: 16;
$square-root: math.sqrt($number);

//math.abs($number) Devuelve el valor absoluto de un número.
$number: -20;
$absolute-value: math.abs($number);

//math.min($a, $b, ...) Devuelve el valor mínimo de los números proporcionados.
$number1: 50;
$number2: 20;
$number3: 100;
$min-value: math.min($number1, $number2, $number3);

//math.max($a, $b, ...) Devuelve el valor máximo de los números proporcionados.
$number1: 50;
$number2: 20;
$number3: 100;
$max-value: math.max($number1, $number2, $number3);

//math.random($min, $max) Devuelve un número aleatorio entre los valores $min y $max (inclusive).
$min: 1;
$max: 10;
$random-value: math.random($min, $max);

//math.round($number)Redondea el número al entero más cercano.
$number: 3.7;
$rounded: math.round($number);

//math.floor($number) Redondea el número hacia abajo al entero más cercano.
$number: 3.7;
$floored: math.floor($number);

//math.ceil($number) Redondea el número hacia arriba al entero más cercano.
$number: 3.1;
$ceiled: math.ceil($number);

//math.clamp($value, $min, $max) Devuelve $value si está dentro del rango definido por $min y $max. Si $value es menor que $min, devuelve $min. Si es mayor que $max, devuelve $max.
$value: 10;
$min: 5;
$max: 15;
$clamped: math.clamp($value, $min, $max);

// Si el valor estuviera fuera del rango:
$value2: 20;
$clamped2: math.clamp($value2, $min, $max);

//math.sin($angle) Calcula el seno de un ángulo en radianes.
$angle: math.div(45, 180) * pi; // Convertir 45 grados a radianes
$sine: math.sin($angle); // Resultado: 0.7071...

//math.cos($angle) Calcula el coseno de un ángulo en radianes.
$angle: math.div(60, 180) * pi; // Convertir 60 grados a radianes
$cosine: math.cos($angle); // Resultado: 0.5

//math.tan($angle) Calcula la tangente de un ángulo en radianes.
$angle: math.div(45, 180) * pi; // Convertir 45 grados a radianes
$tangent: math.tan($angle); // Resultado: 1


//Example 5: sass:string functions
@use 'sass:string';
$texto: "Hoy es un día maravilloso para aprender Sass";

//str-length($string) Devuelve la longitud de una cadena, es decir, el número de caracteres.
$nombre: "Juan Pérez";
$longitud: string.length($nombre);

//str-index($string, $substring) Devuelve la posición de la primera aparición de la subcadena dentro de la cadena principal. Si no se encuentra, devuelve null.
$posicion: string.index($texto, "día");
// Resultado: 11

//str-slice($string, $start, $end) Extrae una sección de la cadena desde la posición $start hasta la posición $end. Si no se especifica $end, extrae hasta el final de la cadena.
$parte: string.slice($texto, 1, 3);
// Resultado: "Hoy"

//string.split($string, $separator, $limit: null) devuelve el texto como una lista. El carácter para decidir cómo separar los elementos es $separator. Limit es opcional y fija el número de elementos separados
@debug (string.split($texto, " "));

//str-replace($string, $old, $new) Reemplaza una subcadena dentro de la cadena con otra subcadena.
$nueva-frase: string.replace($texto, "maravilloso", "increíble");
// Resultado: "Hoy es un día increíble para aprender Sass";

//str-to-lower-case($string) Convierte todos los caracteres de la cadena a minúsculas.
$texto-minusculas: string.to-lower-case($texto);

//str-to-upper-case($string) Convierte todos los caracteres de la cadena a mayúsculas.
$nombre-mayusculas: string.to-upper-case($texto);

//str-unquote($string) Elimina las comillas de una cadena, lo que es útil cuando se trabaja con cadenas citadas.
$sin-comillas: string.unquote($texto);
// Resultado: "Hola, mundo!"

//quote($string) Agrega comillas a la cadena.
$con-comillas: string.quote($texto);
// Resultado: "'Hoy es un día maravilloso para aprender Sass'"

//str-insert($string, $substring, $position) Inserta una subcadena en una posición específica dentro de la cadena.
$insertado: string.insert($texto, " y genial", 26);
// Resultado: "Hoy es un día maravilloso y genial para aprender Sass";


//////////////////////////
////Control structures////
//////////////////////////
//

//Example 1: using if-else block to define background and text color
$theme: 'dark';
header {
  @if $theme == 'dark' {
    background-color: #fff;
    color: #000;
  } @else if $theme== 'light' {
    background-color: #000;
    color: #fff;
  } @else {
    //Default theme
    background-color: #aaa;
    color: #444;
  }
}

//Example 2: another example of using if-else block to define background and text color
$modo-oscuro:true;
body{
  @if $modo-oscuro {
    color: variables.$color-texto-oscuro;
    background-color: variables.$color-fondo-oscuro;
  }
  @else {
    color: variables.$color-texto-claro;
    background-color: variables.$color-fondo-claro;
  }
}

//Example 3: using for to set each paragraph with a different color
/*Two options:
    -though includes the last value.
    -to does not.
    */
@use "sass:list";
$colors: green, lightgreen, red, lightcoral;
@for $i from 1 through list.length($colors) {
  p:nth-of-type(#{$i}) {
    color: #f00;
    background-color: list.nth($colors, $i);
  }
}

//Example 4: using each with maps to create new classes using interpolation
//when using a map, key and value can be used
//when using a list, only value can be used
$error:(
  "leve": 1rem,
  "medio": 2rem,
  "grave": 2.5rem
);

 @each $nombre, $valor in $error {
  .error-#{$nombre} {
    font-size: $valor;
  }
}

//Example 5: Using each with maps to match users and images
$mapa: (
  pepe: "pepe.png",
  lola: "lola.png",
  manuel: "manuel.png"
);
@each $nombre, $imagen in $mapa {
  .perfil-#{$nombre} {
    background: image-url("img/#{$imagen}") no repeat;
  }
}

//Example 6: using each with lists to create new classes using iterpolation
$colors: red, green, blue;

@each $color in $colors {
  .text-#{$color} {
    color: $color;
  }
}

//Example 7: using each to iterate over a two-dimensional map
@use "sass:list";
$colores: (
    error: (red, lightcoral),
    exito: (green, lightgreen),
    aviso: (blue, lightblue)
);

.texto{
    font-size: 1.25rem;
    @each $prop, $valor in $colores{
        $color-fondo:list.nth($valor,1);
        $color-texto:list.nth($valor,2);
        &-#{$prop}{
            background-color: $color-fondo;
            color: $color-texto;
        }
    }
}

//Example 8: using while to set every td element with a different color
@use "sass:list";
$num: 1;
$color-list:(#0f0, #00f, orange, #ccc);
@while $num < 5 {
  td:nth-child(#{$num}) {
    color: #f00;
    background-color: list.nth($color-list, $num);
  }
  $num: $num + 1;
}


///////////////
////Mixins/////
///////////////
//Mixins allow you to reuse the same css code in different parts by invoking it by name. They allow you to use arguments

//Example 1: simple mixin
@mixin formato-texto($tamanyo:2rem) { //Se usa un valor por defecto para el parámetro
  text-align: center;
  color: masOscuro(variables.$color-texto);
  font-weight: bold;
  font-size: $tamanyo;
}
//Aquí aplico el mixin, con un argumento, a tres etiquetas y una clase 
main, footer{
  p, .clase{
    @include formato-texto(1.25em);
  }
}

//Example 2: Media queries implemented with mixins
// _media-query.scss
//mixins use @content directive to allow to inject dynamic content when mixin is invoked
@mixin mixin_media_query($size) {
  @if $size == 'p' {
    @media (max-width: 600px) {
      @content;
    }
  } @else if $size == 'm' {
    @media (min-width: 601px) and (max-width: 1024px) {
      @content;
    }
  } @else if $size == 'g' {
    @media (min-width: 1025px) {
      @content;
    }
  }
}

.texto {
  @include media-query.mixin_media_query(p) {
    color: red;
  }
  @include media-query.mixin_media_query(m) {
      color: green;
    }
  @include media-query.mixin_media_query(g) {
      color: blue;
  }
}


//Example 3: logical operator using @if directive
@use "sass:map";
$mapa-estados: (
  exito: lightgreen, 
  alerta: tomato, 
  informacion: lightblue
);

@mixin estado-boton($estado) {
  @if (length($mapa-estados) >= 2 and map.has-key($mapa-estados, $estado)) {
      background-color: map.get($mapa-estados, $estado);
  }
}

.btn {
  @include estado-boton(exito);
}



///////////////////
////Inheritance////
///////////////////
/*
Allows one or more classes to inherit from a rule.
It is implemented by prefixing % to the rule name (which prevents these rules from generating CSS code) and using the @extend directive in the inheriting class.
Inheritance is used when classes are semantically related and share common properties, such as .error-serious and .error-slight, which could inherit from .error.
*/

//Example 1: basic inheritance
%error{  //este elemento sólo existe para que otros hereden de él
  color: red;
}

.error-leve{
  @extend %error;
  font-size: 1rem;
}

.error-grave{
  @extend %error;
  font-size: 2rem;
}


//Example 2:
// Estilo base con marcador de posición
%base-button {
  padding: 10px 20px;
  font-size: 16px;
  border: none;
  cursor: pointer;
}

// Botón primario que hereda los estilos de %base-button
.button-primary {
  @extend %base-button;
  background-color: #3498db;
  color: #fff;
}

// Botón secundario que también hereda
.button-secondary {
  @extend %base-button;
  background-color: #95a5a6;
  color: #fff;
}


/////////////////////////////
////inheritance vs mixins////
/////////////////////////////
/*Mixin:
  -each selector has all the syles even the shared ones, meaning that they are repeated in different selectors.
  -you can use variables and logic

Inheritance:
  -Less redundancy: Common properties are stored in a single block, and each selector has only the properties that are not common.
  -More semantic: %button makes it clear that these properties are shared across multiple buttons.
*/

//Example 1: inheritance output
%button {
  padding: 10px 20px;
  border-radius: 5px;
  text-align: center;
  font-size: 16px;
}

// Clases específicas que heredan de %button
.primary-btn {
  @extend %button;
  background-color: blue;
  color: white;
}

.secondary-btn {
  @extend %button;
  background-color: grey;
  color: black;
}
/*CSS resulting of the inheritance
.primary-btn, .secondary-btn {
  padding: 10px 20px;
  border-radius: 5px;
  text-align: center;
  font-size: 16px;
}

.primary-btn {
  background-color: blue;
  color: white;
}

.secondary-btn {
  background-color: grey;
  color: black;
}*/

// Example 2: mixin output
@mixin button($bg-color, $color) {
  padding: 10px 20px;
  border-radius: 5px;
  text-align: center;
  font-size: 16px;
  background-color: $bg-color;
  color: $color;
}

// Uso del mixin para crear clases específicas
.primary-btn {
  @include button(blue, white);
}

.secondary-btn {
  @include button(grey, black);
}


/*CSS resulting of the mixin
 .primary-btn {
  padding: 10px 20px;
  border-radius: 5px;
  text-align: center;
  font-size: 16px;
  background-color: blue;
  color: white;
}

.secondary-btn {
  padding: 10px 20px;
  border-radius: 5px;
  text-align: center;
  font-size: 16px;
  background-color: grey;
  color: black;
}
*/