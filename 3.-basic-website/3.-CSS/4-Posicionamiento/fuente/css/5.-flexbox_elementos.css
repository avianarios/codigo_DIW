body{
  width: 66vw;
  margin: 0 auto;
  background-color: lightblue;
  font-family: 'Open Sans', sans-serif;
  font-family: 'Roboto', sans-serif;
}

ul{
  list-style: none;
}

h1{
  font-size: 2rem;
}

h2{
  font-size: 1.5rem;
}

h3{
  font-size: 1.25rem;
}

h1, h2, h3{
  text-align: center;
  /*line-height: 100px;*/
  margin:0px;
  margin-bottom: 10px;
}

.contenedor-flex-nv1{
  background-color: bisque;
  padding: 10px 50px 50px 50px;
  display: flex;
  align-items: center;
  flex-flow: column wrap;
 }

.borde{
  border: 3px solid lightblue;
  padding: 10px 30px 30px 30px;
  width: 80%;
}

.contenedor-flex-nv2 {
  display: flex;
  padding: 0;
  margin: 0;
}

.columna {
  flex-direction: column;
}

.columna-al-reves{
  flex-direction: column-reverse;
}

/*flex-basis vs width
  -flex-basis applies to main axis which is not always width
  -flex-basis applies only to flex items, not containers
  -flex-basis is the initial size (it may not be the final one) before shrink or grow comes into play*/
.contenedor-flex-nv2 > li {
  background:azure;
  flex-basis: 50px;
  color: black;
  font-weight: bold;
  font-size: 2em;
  text-align: center;
}

.gap{
  gap:10px;
}

.nowrap{
  flex-flow: nowrap; 
}

/* Wrap: Los elementos que no caben se desbordan, es decir, el contenedor no cambia de tamaño, así que las cajas no pueden pasar a la siguiente línea y se salen del contenedor (se desbordan) */
.wrap{
  flex-wrap: wrap;
}

.fila-al-reves{
  flex-direction: row-reverse;
}

.min-height{
  min-height: 250px;
  border: 1px solid;
}

.ai-center{
  align-items: center;
}

.as-end{
  align-self: flex-end;
}

.as-start{
  align-self: flex-start;
}

/*.as-center{
  align-self: center;
}*/

.as-stretch{
  align-self: stretch;
}

.orden1{
  order: 1;
}

.orden2{
  order: 2;
}

.orden3{
  order: 3;
}

/*It has to be an ID. If it were a class, .contenedor-flex-nv2 > li would have more specifity and flex-basis is already there*/
#basis200px{    
  flex-basis: 200px;
}

#basis100px{
  flex-basis: 100px
}

.grow2{
  flex-grow:2;
}

.grow3{
  flex-grow:3;
}

.shrink2{
  flex-shrink: 2;
}

.shrink3{
  flex-shrink: 3;
}

/*flex is a shortcut for flex-grow, flex-shrink and flex-basis

flex: 3;        //one number, no unit: flex-grow. flex-basis=0
flex: 10rem;    //one value with unid: flex-basis
flex: 1 20px;   //two values with unit: flex-grow and flex-basis
flex: 2 2;      //two values, no unit: flex-grow and flex-shrink
flex: 2 2 10%;  //three values: flex-grow, flex-shrink and flex-basis

*/